Deadlock

A set of two or more processes are deadlocked if they are blocked (i.e., in
the waiting state), each holding a resource and waiting to acquire a resource
held by another process in the set.

example:
   - a system has two tape drives
   - two processes are deadlocked if each holds one tape drive and has
     requested the other

example: semaphore A and B, each initialized to 1

P_0          P_1
---          ---
A.wait();    B.wait();
B.wait();    A.wait();
A.signal();  B.signal();
B.signal();  A.signal();

Deadlock depends on the dynamics of the execution.

Illustrates that it is difficult to identify and test for deadlocks
which may occur only under certain circumstances.

System model:

   - resource types: R_1, R_2, ..., R_n
   - each resource R has W_i instances
   - each process utilizes a resource as follows
    
      // request, e.g., open() system call
      // use
      // release, e.g., close() system call

Any instance of a resource type can be used to satisfy a request of that
resource.

_All_ of the following four necessary conditions _must_ hold simultaneously for
deadlock to occur:

   - mutual exclusion: one 1 process can use a resource at a time

   - hold and wait: a process holding at least one resource is waiting
                    to acquire additional resources which are currently
                    held by other processes

   - no preemption: a resource can only be released voluntarily by the 
                    process holding it

   - circular wait: a cycle of process requests exists, i.e., P_0 is waiting
                    for a resource hold by P_1 who is waiting for a resource
                    held by P_j ... who is waiting for a resource held by
                    P_(n-1) which is waiting for a resource held by P_n
                    which is waiting for a resource held by P_0.

Circular wait implies the hold and wait condition. Therefore,
these conditions are not completely independent.

Resource Allocation Graphs

A resource allocation graph contains a set of vertices V and a set of edges E.

V is partitioned into two types:
   - P = {P_1, P_2, ..., P_n} is the set of all processes.

   - R = {R_1, R_2, ..., R_m} is the set of all resources.

A request is represented by a directed edge from P_i to R_j.

An assignment is represented by a directed edge from R_j to P_i.

Resource type with 4 instances:

P_i requests an instance of R_j:

P_i is holding an instance of R_j:

Sample resource allocation graph (Fig. 7.1):

P_1 wants a resource held by P_2.
No one is requesting a resource from R_4.

If a resource allocation graph contains no cycles, then no process is deadlocked.
If a resource allocation graph contains a cycle, then a deadlock _may_ exist.

Resource allocation graph with a cycle and deadlock (Fig. 7.2):

Resource allocation graph with a cycle and no deadlock (Fig. 7.3):

Therefore, a cycle means deadlock is _possible_, but not necessarily _present_.
A cycle is not sufficient proof of the presence of deadlock.

A cycle is a _necessary_ condition for deadlock, but _not_ a _sufficient_
condition for deadlock.

Getting a 4.0 GPA is sufficient to graduate, but it is not necessary.
Passing OS is necessary, but not sufficient.

Resource allocation graph summary
   - if a resource allocation graph does not contain a cycle, then there is absolutely no
     possibility of deadlock.

   - if a resource allocation graph contains a cycle, then there is the possibility of deadlock.

   - if each resource type has exactly one instance, then a cycle implies
     that deadlock has occurred

   - if the cycle involves only a set of resource types, each of which has
     only a single instance, then a deadlock has occurred.

   - if all instances of a resource are allocated to a process in a cycle,
     then there is deadlock.

Methods for handling deadlock:

   - ensure that the system never enters a deadlocked state

      - deadlock prevention
      - deadlock avoidance

   - allow the system to enter deadlocked state, the deal with and 
     eliminate the problem; deadlock detection and recovery

   - ignore the problem; approached used by many operating systems
     including UNIX and Windows, and the Java VM.

Deadlock Prevention

Restrain the ways resource requests are made so to prevent
one of the four necessary conditions.

   - prevent mutual exclusion
      - use only sharable resources, e.g., a read-only file
      - impossible for practical systems

   - prevent hold and wait
      - either
         - preallocate, e.g.,
            - do not take 1 chopstick if you cannot get the other
            - process copies data from DVD drive to a file on disk and
              then prints it from there
               - request DVD drive
               - request disk file
               - request printer
            - all system calls requesting resources must proceed all other
              system calls

         - a process can request resources only when it has none, e.g.,
            - request DVD drive and disk file
            - release DVD drive and disk file
            - request disk file and printer (not guarantee data will still be
              there)
            - release disk file and printer

      - inefficient
      - starvation possible

   - prevent no preemption (i.e., allow preemption, and permit the OS
                            to take away resources from a process)

      - when a process must wait, it must release its resources

      - some resources cannot be feasibly preempted (e.g., printers, tape
        drives)

   - prevent circular wait
      - impose a total ordering on resources
      - only allow requests in an increasing order

Usually a deadlock prevention approach is not reasonable.

Deadlock Avoidance:

Require that the system has some information available up front.

Each process declares the maximum number of resources of each type which it
may need.

Dynamically examine the resource allocation state to ensure that there can
never be a circular-wait condition.

The system's resource-allocation state is defined by the number of available
and allocated resources, and the maximum possible demands of the processes.

When a process requests an available resource, the system must decide if 
immediate allocation leaves the system in a _safe sate_.

The system is in a safe state if there exists a safe sequence of all processes.

Sequence < P_1, P_2, ... P_n > is safe for the current allocation state if,
for each P_i, the resources which P_i can still request can be satisfied by
   - the currently available resources plus
   - the resources held by all of the P_j's, which j < i.

If the system is in a safe state, there can be no deadlock.

If the system is in an unsafe state, there is the possibility of deadlock.

Example: Consider a system with 12 magnetic tapes and 3 processes (P_0, P_1,
and P_3):

Available = 3

          Maximum needs         Holding   Needs
===============================================
P_0           10                   5        5
P_1            4                   2        2
P_2            9                   2        7 

Is the system in a safe state?
If so, which sequence satisfies the safety criteria?

Available = 2

          Maximum needs         Holding   Needs
===============================================
P_0           10                   5        5
P_1            4                   2        2
P_2            9                   3        6

Is the system in a safe state?
If so, which sequence satisfies the safety criteria?

In this scheme, a process which requests a resource that is currently
available, may still have to wait.  Thus, resource utilization may be
lower than it would otherwise be.

Two deadlock detection algorithms
    - resource-allocation graph algorithm
    - Banker's algorithm

Resource-allocation graph algorithm

   - only applicable when we only have 1 instance of each resource type
   - claim edge (dotted edge), like a _future_ request edge
   - when a process requests a resource, the claim edge is converted to
     a request edge
   - when a process releases a resource, the assignment edge is converted to
     a claim edge
   - cycle detection: O(n^2)

--
Banker's Algorithm
   - a classic deadlock avoidance algorithm.
   - more general than resource-allocation graph algorithm (handles
     multiple instances of each resource type), but
   - is less efficient

We call Banker's algorithm when a request for R is made.

Let n be the number of processes in the system, and m be the number
of resource types.

Define:

   - available[m]: the number of units of R currently unallocated, e.g.,
                   available[3] = 2
 
   - max[n][m]: describes the maximum demands of each process, e.g., 
                max[3][1] = 2

   - allocation[n][m]: describes the current allocation status, e.g., 
                       allocation[5][1] = 3

   - need[n][m]: describes the _remaining_ possible need, i.e.,
                 need[i][j] = max[i][j] - allocation[i][j]

Resource-request algorithm:

Define
   request[n][m]: describes the current outstanding
requests of all processes, e.g., request[2][1] = 3.

1) If request[i][j] <= need[i][j], to to step 2; otherwise, raise an error
condition.

2) If request[i][j] > available[j], then the process must wait.

3) Otherwise, _pretend_ to allocate the requested resources to P_i.

    available[j] = available[j] - request[i][j]

    allocation[i][j] = allocation[i][j] + request[i][j]

    need[i][j] = need[i][j] - request[i][j]

Once the resources are _allocated_, check to see if the system state is safe.

If unsafe, the process must wait and the old resource-allocated state is
restored.

Safety algorithm (to check for a safe state):

1)

Let work be an integer array of length n, initialized to available.
Let finish be a boolean array of length m, initialized to false.

2) Find an i such that both

   - finish[i] == false
   - need[i] <= work

   if no such i exists, go to step 4

3)
   work = work + allocation[i];

   finish[i] = true;

   go to step 2

4) if finish[i] == true for all i, then the system is in a safe state,
   otherwise unsafe.
  
Run-time complexity: O(m x n^2).

Example: Consider a system with 5 processes (P_0 .. P_4) and 3 resources types
(A(10) B(5) C(7))

resource-allocation state at time t_0:

         allocation   max    need    available
==============================================
           A B C     A B C   A B C    A B C

P_0        0 1 0     7 5 3   7 4 3    3 3 2
P_1        2 0 0     3 2 2   1 2 2
P_2        3 0 2     9 0 2   6 0 0
P_3        2 1 1     2 2 2   0 1 1
P_4        0 0 2     4 3 3   4 3 1

Is the system in a safe state?
If so, which sequence satisfies the safety criteria?

< P_1, P_3, P_4, P_2, P_0 >

Now suppose, P_1 requests an additional instance of A and 2 more instances
of type C.

request[1] = (1,0,2)

1) check if request[1] <= need[i] (yes)

2) check if request[1] <= available[i] (yes)

3) do pretend updates to the state

         allocation   max    need    available
==============================================
           A B C     A B C   A B C    A B C

P_0        0 1 0     7 5 3   7 4 3   *2 3 0*
P_1       *3 0 2*    3 2 2  *0 2 0*
P_2        3 0 2     9 0 2   6 0 0
P_3        2 1 1     2 2 2   0 1 1
P_4        0 0 2     4 3 3   4 3 1

Is the system in a safe state?
If so, which sequence satisfies the safety criteria?

< P_1, P_3, P_4, P_0, P_2 >

Hence, we immediately grant the request.

Will a request of (3,3,0) by P_4 be granted?





Will a request of (0,2,1) by P_0 be granted?




Deadlock Detection
   - requires an algorithm which examine the state of the system to determine
     whether a deadlock has occurred
   - requires overhead
      - run-time cost of maintaining necessary information and executing
        the detection algorithm
      - potential losses inherent in recovering from deadlock


Single instance of each resource type
   - wait-graph
   - P_i -> P_j = P_i > R_q and R_q -> P_j
   - detect cycle: O(n^2)
   - overhead: maintain the graph + invoke algorithm 

Multiple instances of a resource type
   - use an algorithm with similar to Banker's, which simply investigates
     _every_ possible allocation sequence for the processes which remain
     to be completed

Define
   - available[m],
   - allocation[n][m], and
   - request[n][m]

with their usual semantics.

1)

Let work be an integer array of length n, initialized to available.

Let finish be a boolean array of length m.
For all i, if allocation[i] != 0, then finish[i] = false; otherwise finish[i] =
true.

2) Find an i such that both

   - finish[i] == false
     // P_i is currently _not_ involved in a deadlock
   - request[i] <= work

   if no such i exists, go to step 4

3)
   // reclaim the resources of process P_i
   work = work + allocation[i];

   finish[i] = true;

   go to step 2

4) if finish[i] == false, for some i, then the system is in a deadlocked state;

   moreover, if finish[i] == false, then process P_i is deadlocked
  
Run-time complexity: O(m x n^2).

Example: Consider a system with 5 processes (P_0 .. P_4) and 3 resources types
(A(7) B(2) C(6))

resource-allocation state at time t_0:

         allocation   request    available
==============================================
           A B C       A B C       A B C

P_0        0 1 0       0 0 0       0 0 0
P_1        2 0 0       2 0 2   
P_2        3 0 3       0 0 0
P_3        2 1 1       1 0 0
P_4        0 0 2       0 0 2

Is the system in a deadlocked state?
If not, which sequence results in finish[i] == true for all i ?

< P_0, P_2, P_3, P_1, P_4 >

Now suppose, P_2 requests an additional instance of C:

         allocation   request    available
==============================================
           A B C       A B C       A B C

P_0        0 1 0       0 0 0       0 0 0
P_1        2 0 0       2 0 2   
P_2        3 0 3      *0 0 1*
P_3        2 1 1       1 0 0
P_4        0 0 2       0 0 2

Is the system in a deadlocked state? Yes.
If not, which sequence results in finish[i] == true for all i ?

Although we can reclaim the resources held by P_0, the number of
available resources is insufficient to fulfill the requests of the
other processes.

Thus, a deadlock exists, consisting of processes P_1, P_2, P_3, and P_4.

When should we invoke the detection algorithm? depends on
    - how _often_ is a deadlock likely to occur
    - how _many_ processes will be affected by deadlock when it happens

If deadlocks occur frequently, then the algorithm should be invoked frequently

Deadlocks only occur when some process makes a request which cannot be
granted (if this request is the completes a chain of waiting processes).

Extreme: invoke the algorithm every time a request is denied 

Alternative: invokes the algorithm at less frequent time intervals
   - once per hour
   - whenever CPU utilization < 40%
   - disadvantage: cannot determine exactly which process 'caused' the
                   deadlock

Deadlock Recovery
   - inform operator and let them decide how to deal with it manually
   - let the system _recover_ from the deadlock automatically
      - abort or more of the deadlocked processes to break the circular wait
      - preempt some resources from one or more of the processes to break the
        circular wait

Process termination

Aborting a process is not easy; involves clean-up (e.g., file, printer).

   - abort all deadlocked processes
      - disadvantage: wasteful
   - abort one process at a time until the circular wait is eliminated
      - disadvantage: lot of overhead; must re-run algorithm after each kill
      - how to determine which process to terminate? minimize cost
         - priority of the process
         - how long has it executed? how much more time does it need?
         - how many and what type of resources has the process used?
         - how many more resources will the process need to complete?
         - how many processes will need to be terminated?
         - is the process interactive or batch?

Resource Preemption:

Incrementally preempt and re-allocate resources until the circular wait
is broken.

   - selecting a victim (see above)

   - rollback: what should be done with process which lost the resource?
     clearly it cannot continue; must rollback to a safe state (???) =>
     total rollback
 
   - starvation: pick victim only small (finite) number of times; use 
                 number of rollbacks in decision

Deadlock Summary
   - definition of deadlock
   - three methods of dealing with deadlock 
      - deadlock prevention
         - ensure at least one of the 4 necessary conditions for deadlock
           never holds
            - mutual exclusion
            - hold and wait
            - no preemption
            - circular wait

        or avoidance
         - less stringent, but requires a priori information)
         - Banker's algorithm

      - deadlock detection and recovery
         - terminate processes
            - selecting a victim
         - preempt resources
            - selecting a victim
            - rollback
            - starvation

      - ignore the problem (most common approach)
  
   - there is no silver bullet
   - often a combination of approaches should be employed to permit us to
     use an optimal approach for each class of resources in the system
