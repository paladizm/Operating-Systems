Page Replacement
   - is it possible to over-allocate memory?
   - page fault options
      - terminate process
      - swap out a process -- reduced the degree of multiprogramming

Basic Page Replacement

   1) Find the location of the desired page on disk

   2) Find a free frame:

      a) If there is a free frame, use it
      b) If there is no free frame, use a page-replacement algorithm to
         select a victim frame
      c) Write the victim frame to disk; change the page and frame tables
         accordingly

   3) Read the desired page into the newly freed frame; change the page
      and frame tables

   4) Restart the user process

If no frames are free, "two" pages transfers (one in and one out) are
required.

This a lot of overhead.

Can reduce it by using a "dirty bit" (applies to read-only
pages, such as program code) as well.

This scheme can reduce I/O time by 1/2 if the page has not been modified.

Two major issues with demand paging which must be addressed:

* frame-allocation algorithm (how many frames to allocation to each process)
* page-replacement algorithm (how to select a page to be replaced)

These are important problems because disk I/O is so expensive.

How to evaluate algorithms?
given a string of memory references (called a reference string),
count the number of page faults.

0100, 0432, 0101, 0612, 0102, 0103, 0104, 0101, 0611, 0102, 0103, 0104,
0101, 0610, 0102, 0103, 0104, 0101, 0609, 0102, 0105

assume 100 bytes/page

1,4,1,6,1,6,1,6,1,6,1

Need to know the #frames available: as #frames increase, #page faults
should decrease.

3 or more frames: ?
1 frame: ?

--

Reference string: 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1

FIFO page replacement
   3 frames: ?
  
   - easy to understand and implement
   - poor performance 
      - initialization module
      - variable initialized early and used often
 
   - everything will work, but a bad replacement choice
     increases the page fault rate and slows process execution
   - it does not result in incorrect execution

   - reference string: 1,2,3,4,1,2,5,1,2,3,4,5

   - Belady's anomaly
      
Optimal page replacement
   - has lowest page fault rate, and
   - never suffers from Belady's anomaly

   - replace the page which will not be used for the longest period of time

   - problem?

   - SJF

   - mainly used for comparison purposes
Reference string: 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1
   3 frames: ?



LRU page replacement
   - idea is to try to approximate the optimim

   - key difference b/t FIFO and OPT (other than looking backward vs.
     forward in time)
       - FIFO uses the time when a page was brought into memory
       - OPT uses the time when a page is to be used

   - use recent page as an approximation of future, then we can replace
     the page which "has not been used" for the longest period of time

   - associate with each page the time of its last use

Reference string: 7,0,1,2,0,3,0,4,2,3,0,3,2,1,2,0,1,7,0,1
   3 frames: ?

   - does not suffer from Belady's anomaly

   - major issue is implementation (need hardware support)

      - counters
         - every time a ref is made, copy value of clock register into page
           table entry

      - stack
         - when a ref is made, remove page number from stack and push
           onto stack
         - most recently used page is always on top
         - least recently used page is always on bottom
         - use doubly-linked-list with head and tail pointers to implement
         - no search for replacement page number

LRU belongs to a class of page-replacement algorithms known as
"stack algorithms" which never exhibit Belady's anomaly.

A stack algorithm is one for which it can be shown that the
set of pages in memory for n frames is always a subset of the set
of pages which would be in memory with n+1 frames:w
 

Need hardware support, but rarely have it.

Often we have a reference bit associated with each entry in the page table.

Can determine which pages have been used and not used by examining the 
reference bits, although we do not know the "order" of use.

Can we approximate order?

Additional-reference bits algorithm
    00000000
    11111111

    110001000 has been used more recently than one with 01110111

    if we interpret these bytes as unsigned integers, the page with the
    lowest value is the LRU page

    all number not unique -> swap out all or use FIFO

Second-chance page-replacement algorithm
   - a FIFO replacement algorithm
   - number of bits used is 0; leaving only the reference bit
   - if 0, replace
   - if 1, give page a 2nd chance and move onto next FIFO page
     - reset ref bit to 0 and reset arrival time to current time

   - a page given a second chance will not be replaced until
     all other pages have been replaced (FIFO) or given second chances
   
   - if a page is used often enough to keep its reference bit set,
     it will never be replaced

   - implementation: the clock algorithm using a circular queue
      - a pointer (hand on a clock) indicates which page is to be replaced next
      - when a frame is needed, the pointer advances until it finds a page
        with a 0 reference bit
      - as it advances, it clears the reference bits
      - once a victim page is found, the page is replaced, and the new
        page is inserted in the circular queue in that position
      - degenerates to FIFO replacement if all bits are set

Enchanced second-chance algorithm
   - by considering the reference bit and dirty bit as an ordered pair

   - we now have four classes:

      (0,0): neither recently used nor modified -- best page to replace

      (0,1): not recently used but modified -- not quite as good, because
             the page will need to be written out before replacement
 
      (1,0): recently used, but clean -- probably will be used again soon

      (1,1): recently used and modified -- probably will be used again soon,
             and the page will need to be written out to disk before it can
             be replaced

    use same scheme as above, but rather than just checking if the reference
    bit is set to 1, we examine the class,

    replace the first page encountered in the lowest non-empty class

    may have to search circular queue several times before we find a page
    to be replaced

    differnce with above algorithm is that here we give preference to those
    pages which have been modified to reduce the number of I/O's required.

Counting-based page replacement
   - least frequently used (LFU) page-replacement algorithm
   - most frequently used (MFU) page-replacement algorithm





