Monitors

A `monitor' is a high-level synchronization construct.

A monitor is an abstract data type which encapsulates private data with public
procedures which act on that data.

Processes have have mutual exclusion when executing these operations within
the monitor.

Only 1 process can be active in the monitor at 1 time; this gives you mutual
exclusion between all the shared local variables, used to solve the problem,
in the monitor.  In essence, what the monitor buys for you is it relieves
you from having to protect access to those shared variables.

Monitor routines can only access local variables and formal parameters.

Local variables can only be accessed within the monitor.

Often a monitor contains routines which govern the entry and exit to a
critical section.

Monitors often use `condition variables' which hold no value per se, but
having waiting lists associated with them.

Why?  explain that here ... because entry queue is not expressive enough

Condition x;

The only operations which can be invoked on condition variables 
are wait and signal:
    
    - x.wait(): the invoking process is suspended.
    - x.signal(): resumes exactly 1 suspended process; if no process is
                  currently suspended, then a signal has no effect.

Therefore, signals on condition variables are not remembered,
unlike semaphore signals which are remembered.

Consider a process p which invokes x.signal() and a suspended
process q associated with x.

   - signal and wait
   - signal and continue

Concurrent Pascal, Mesa, C#, and Java support monitors.

--

A monitor solution to the Readers-Writers problem:
   - readers' priority
   - writers' priority

A monitor solution to the (readers' priority) Readers-Writers problem:

Rentry             |   Cond stopW, stopR;    |  Wentry
-------             |                         |  -------
if (ww == true)     |   int readerCount = 0;  |  if (readerCount > 0 || ww == true)
   stopR.wait();    |   bool ww = false;      |     stopW.wait();
readerCount++;      |                         |  ww = true;


Rexit                                           Wexit
------                                           ------
readerCount--;                                   ww = false;
if (readerCount == 0)                            if ( .... )
   stopW.signal();                                  stopW.signal();
                                                 else ( ... )
                                                    stopR.signal();

R                                                W
-                                                -
Rentry();                                       Wentry();
read();                                          write();
Rexit();                                        Wexit();

The entry and exit code is in the monitor.  The monitor protects this code.
This is the entire purpose of the monitor.

A monitor solution to the (writers' priority) Readers-Writers problem:

Rentry               Cond stopR, stopW;    Wentry
-------               int readerCount = 0;  ------
if (ww == true ||     int waiting = 0;      if (readerCount > 0 || ww == true) {
    wwaiting > 0)     bool ww = false;         wwaiting++;
   stopR.wait();                               stopW.wait();
}                                           }
readerCount++;                              wwaiting--;
                                            ww = true;

Rexit                                      Wexit
------                                      ------
readerCount--;                              ww = false;
if (readerCount == 0)                       if (wwaiting > 0)
   stopW.signal();                             stopW.signal();
                                            else
                                               stopR.signal();   
--

A monitor (deadlock-free) solution to the Dining Philosophers problem:

Imposes restriction that a philosopher may only pickup her chopsticks if both
are available.

This solution guarantees no two neighbors eat at the same time and that no
deadlocks will occur.  Unfortunately, it does not prevent a philosopher from
starving.

monitor DiningPhilosophers {

   enum State {THINKING, HUNGRY, EATING};
   
   State[] states = new State[5];

   Condition[] self = new Condition[5];

   DiningPhilosophers {
      for (int i=0; i < 5; i++)
         state[i] = State.THINKING;
   }

   void pickupForks(int id) {
      state[id] = State.HUNGRY;
      test(id);
      if (state[id] != State.EATING)
         self[id].wait();
   }

   void releaseForks(int id) {
      state[id] = State.THINKING;
  
      // test left and right neighbors
      test((id + 1) % 5);
      test((id + 4) % 5);
   }

   private void test (int id) {
   
      if ( (state[(i+1) % 5] != State.EATING) &&
           (state[(i+4) % 5] != State.EATING) &&
           (state[i] == State.HUNGRY) ) {

         state[i] = State.EATING;
         state[i].signal();
      }
   }
}

thread Philosopher {

   while (true) {
      dpm.pickupForks(id);
      eat();
      dpm.releaseForks(id);
   }
}
 
A monitor solution to the Bounded Buffer problem
    - with the possibility of deadlock
    - without the possibility of deadlock

Hints for developing monitors:
   - in A entry code ask: `under what conditions do we want to prevent an A
     from getting into its <cs>?'

   - ususlly waits in entry code

   - in A exit code ask: `who might be waiting that I want to signal?' or
     `who do I need to signal?'

   - usually signals in exit code

   - you need to use booleans when there is mutual exclusion among 1 process

   - you need to count things when there can be more than 1 process executing
     at any 1 time

   - make sure when you increment, you decrement
   - make sure when you set to true, you set to false 

   - usually OR's ( || ) in entry code

   - usually AND's ( && ) in exit code

The monitor gets you mutual exclusion among anything which wants to use the
monitor, i.e., absolute/total mutual exclusion within the monitor boundary.

Exercises: self-study

Consider 3 process types: A, B, and C

mutual exclusion among A's.
mutual exclusion between B's and C's.
mutual exclusion between A's and C's.
Priority to A's.

A            B             C
-            -             -
Aentry();    Bentry();     Bentry();
<cs>         <cs>          <cs>
Aexit();     Bexit();      Cexit();

Develop a monitor solution to this problem, i.e., provide
definitions for the entry and exit code for all 3 process to
be included in the monitor.

Now consider:

mutual exclusion among C's.
At most 5 B's.
mutual exclusion between A's and B's
mutual exclusion between A's and C's

Develop a monitor solution to this problem, i.e., provide
definitions for the entry and exit code for all 3 process to
be included in the monitor.

The Java Monitor Model
   - the Bounded Buffer Problem
      - busy waiting to
      - monitor with yielding to
      - monitor with entry and wait queues
   - multiple notifications 
   - the Readers-Writers Problem
   - Java monitor model not expressive enough
      - general monitor model has named condition variables allowing a thread
          - to wait for a _specific_ condition, or
          - to be notified when a specific has been met
      - in Java monitor only has one unnamed condition for which to wait
        (the monitor itself) and wait(), notify(), and notifyAll()
         - notified thread receives no information as to why it was awakened
         - it is up to the reactivated thread to check for itself whether the
           condition for which it was waiting has been met (work() method
           illustrates this)
      - use Java condition variables
         - await() and signal()
         - Java condition variables cannot be used in concert with Java
           monitors
         - must use condition variables to protect entry and exit with
           lock() and unlock()
      
   - the Dinning Philosophers Problem demonstrates these concepts

final self-study: code up your solutions to the above practice
problems in Java

Hoare's Proof Rules for Monitors
   - with each monitor define an invariant I which is true
      - after initialization
      - after each procedure assuming that is was true before each procedure
      - before each wait operation

B is the condition you want to wait for:

I {cond.wait()} I ^ B

I ^ B {cond.signal()} I

the reason Hoare's monitor model is 2

Bernstein's condition:

T_1 and T_2 interfere if:

(R_1 intersect W_2) union (R_2 intersect W_1) union (W_1 intersect W_2) != 0,

in other words if the union of intersections is not 0.
