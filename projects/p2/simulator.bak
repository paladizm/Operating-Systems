#include <iostream>
#include <iomanip>
#include <queue>
#include <list>
#include <vector>
#include <string>
#include <fstream>
using namespace std;

/*********************** Function: MakeTokens ********************/
//This function makes tokens out of the numbers/letters given in the
//input file and places them into a vector for ease of use.
//Pre: The numbers/letters must be the ones that you want to be in
//         the vector. It takes care of all the whitespace.
//Post: Return the vector with tokens in it.
vector < string > MakeTokens (const string & str, const string & delim)
{
  vector < string > tokens;
  size_t p = 0, p1 = string::npos;
  while (p != string::npos) {
    p1 = str.find_first_of (delim, p);
    if (p1 != p) {
      string token = str.substr (p, p1 - p);
      tokens.push_back (token);
    }
    p = str.find_first_not_of (delim, p1);
  }
  return tokens;
}

/*********************** Function: StringToInt ********************/
//This function makes strings into ints.
//Pre: The string must be an integer before placing in function.
//Post: Returns the int from the conversion of the string.
int
StringToInt (string strconvert)
{
  int conversion;
  conversion = atoi (strconvert.c_str ());
  return (conversion);
}
struct Process
{
  string Event;
  string RQ;
  int Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;
  bool started, IOClean;
};

struct Semephore
{
  int value;
    list < Process > SemList;
};
bool
DealCPU (list < Process > &CPU, list < Process > &RQ1,
	 list < Process > &RQ2, vector < Process > &Finished, int &CPURQ1,
	 int &CPURQ2, int &memory, int &time, ofstream & out)
{
  bool cpun = false;
  if (CPU.empty ()) {
    if (!RQ1.empty ()) {
      Process temp = RQ1.front ();
      CPU.push_back (temp);
      cpun = true;
      RQ1.pop_front ();
    }
    else if (!RQ2.empty ()) {
      Process temp = RQ2.front ();
      CPU.push_back (temp);
      cpun = true;
      RQ2.pop_front ();
    }
  }
  if (!CPU.empty ()) {
    if (cpun == true && !CPU.front ().started) {
      CPU.front ().STime = time;
      CPU.front ().started = true;
      cpun = false;
    }
    if (CPU.front ().RQ == "RQ1") {
      if (CPU.front ().RTM > 0) {
	if (CPURQ1 > 0) {
	  CPU.front ().RTM--;
	  CPURQ1--;
	}
	else {
	  Process temp = CPU.front ();
	  temp.RQ = "RQ2";
	  RQ2.push_back (temp);
	  CPU.pop_front ();
	  CPURQ1 = 100;
	  cpun = true;
	  out << "Event: E   " << "Time: " << time << endl;
	  return true;
	}
      }
      else {
	Process temp = CPU.front ();
	temp.FTime = time;
	memory += temp.Memory;
	Finished.push_back (temp);
	CPU.pop_front ();
	CPURQ1 = 100;
	cpun = true;
	out << "Event: T   " << "Time: " << time << endl;
	return true;
      }
    }
    else {
      if (!RQ1.empty ()) {
	CPURQ2 = 300;
	CPURQ1 = 100;
	RQ2.push_back (CPU.front ());
	CPU.pop_front ();
	CPU.push_back (RQ1.front ());
	RQ1.pop_front ();
	CPU.front ().RTM--;
	CPURQ1--;
      }
      else {
	if (CPU.front ().RTM > 0) {
	  if (CPURQ2 > 0) {
	    CPU.front ().RTM--;
	    CPURQ2--;
	  }
	  else {
	    Process temp = CPU.front ();
	    RQ2.push_back (temp);
	    CPU.pop_front ();
	    CPURQ2 = 300;
	    cpun = true;
	    out << "Event: E   " << "Time: " << time << endl;
	    return true;
	  }
	}
	else {
	  Process temp = CPU.front ();
	  temp.FTime = time;
	  memory += temp.Memory;
	  Finished.push_back (temp);
	  CPU.pop_front ();
	  CPURQ2 = 300;
	  cpun = true;
	  out << "Event: T   " << "Time: " << time << endl;
	  return true;
	}
      }
    }
  }
  return false;
}

void
HandleJob (list < Process > &JobQ, list < Process > &RQ1,
	   vector < string > &tokens, int &time, bool & ev, bool & eve,
	   bool & getcm, int &memory, int &count, int &tot_proc)
{
  if (tokens[0] == "A") {
    if (count == 0) {
      time = StringToInt (tokens[1]);
      count++;
    }
    if (time == StringToInt (tokens[1])) {
      Process newp;
      newp.Event = "A";
      newp.RQ = "RQ1";
      newp.Time = StringToInt (tokens[1]);
      newp.Job = StringToInt (tokens[2]);
      newp.Memory = StringToInt (tokens[3]);
      newp.RT = StringToInt (tokens[4]);
      newp.RTM = StringToInt (tokens[4]);
      newp.started = false;
      newp.IOBurst = 0;
      newp.IOClean = false;
      newp.RQT = 0;
      ev = true;
      if (newp.Memory <= 512) {
	JobQ.push_back (newp);
	tot_proc++;
      }
      else {
	eve = true;
      }
      getcm = true;
    }
    else {
      getcm = false;
    }
  }
  while (!JobQ.empty ()) {
    if (JobQ.front ().Memory <= memory) {
      JobQ.front ().RQT = time;
      RQ1.push_back (JobQ.front ());
      memory -= JobQ.front ().Memory;
      JobQ.pop_front ();
    }
    else {
      break;
    }
  }


}

void
HandleIO (vector < Process > &IO, list < Process > &CPU,
	  list < Process > &RQ1, vector < string > &tokens, int &time,
	  bool & getcm, list < Process > &RQ2, vector < Process > &Finished,
	  int &CPURQ1, int &CPURQ2, int &memory, ofstream & out, bool & NOGO)
{
  if (!IO.empty ()) {
    for (int i = 0; i < IO.size (); i++) {
      if (IO[i].IOBurst > 0) {
	IO[i].IOBurst--;
      }
      if (IO[i].IOBurst == 0) {
	IO[i].RQ = "RQ1";
	IO[i].IOClean = true;
	RQ1.push_back (IO[i]);
	out << "Event: C   " << "Time: " << time << endl;
      }
    }
    int j = static_cast < int >(IO.size ());
    vector < Process > temp;
    for (int i = 0; i < j; i++) {
      if (!IO[i].IOClean) {
	temp.push_back (IO[i]);
      }
    }
    IO.clear ();
    j = static_cast < int >(temp.size ());
    for (int i = 0; i < j; i++) {
      IO.push_back (temp[i]);
    }
  }

  if (tokens[0] == "I") {
    if (time == StringToInt (tokens[1])) {
      if (!CPU.empty ()) {
	CPU.front ().IOBurst = StringToInt (tokens[2]);
	CPU.front ().IOClean = false;
	CPU.front ().IOS = time;
	CPU.front ().IOB = StringToInt (tokens[2]);
	IO.push_back (CPU.front ());
	out << "Event: I   " << "Time: " << time << endl;
	CPU.pop_front ();
	CPURQ1 = 100;
	CPURQ2 = 300;
      }
      getcm = true;
    }
    else {
      getcm = false;
    }

  }

}

void
HandleSem (vector < string > &tokens, Semephore Semephores[],
	   list < Process > &CPU, list < Process > &RQ1,
	   list < Process > &RQ2, vector < Process > &Finished, int &memory,
	   int &count, int &CPURQ1, int &CPURQ2, bool & getcm, int &time,
	   ofstream & out, bool & ew, bool & es)
{
  if (count == 1) {
    for (int i = 0; i < 5; i++) {
      Semephores[i].value = 1;
    }
  }
  if (tokens[0] == "W") {
    if (time == StringToInt (tokens[1])) {
      int i = StringToInt (tokens[2]);
      if (Semephores[i].value < 1) {
	Semephores[i].SemList.push_back (CPU.front ());
	CPU.pop_front ();
	CPURQ1 = 100;
	CPURQ2 = 300;
      }
      Semephores[i].value--;
      getcm = true;
      ew = true;
    }
    else {
      getcm = false;
    }
  }
  if (tokens[0] == "S") {
    if (time == StringToInt (tokens[1])) {
      int i = StringToInt (tokens[2]);
      if (!Semephores[i].SemList.empty ()) {
	Semephores[i].SemList.front ().RQ = "RQ1";
	RQ1.push_back (Semephores[i].SemList.front ());
	Semephores[i].SemList.pop_front ();
      }
      Semephores[i].value++;
      getcm = true;
      es = true;

    }
    else {
      getcm = false;
    }
  }
}

void
EventD (vector < string > tokens, list < Process > JobQ, list < Process > RQ1,
	list < Process > RQ2, list < Process > CPU,
	vector < Process > Finished, vector < Process > IO, int memory,
	Semephore Semephores[], bool & getcm, int time, ofstream & out,
	int CPURQ1, int CPURQ2)
{
  if (tokens[0] == "D") {
    if (time == StringToInt (tokens[1])) {

      out << "Event: D   " << "Time: " << time << endl;
      out << endl;
      out << "************************************************************" <<
	endl;
      out << endl;
      out << "The status of the simulator at time " << time << "." << endl;
      out << endl;
      out << "The contents of the JOB SCHEDULING QUEUE" << endl;
      out << "----------------------------------------" << endl;
      out << endl;
      out << "Job #  Arr. Time  Mem. Req.  Run Time" << endl;
      out << "-----  ---------  ---------  --------" << endl;
      out << endl;
      if (!JobQ.empty ()) {
	list < Process >::iterator i = JobQ.begin (), j = JobQ.end ();
	for (; i != j; i++) {
	  out << setw (5) << (*i).Job << "  " << setw (9) << (*i).
	    Time << "  " << setw (9) << (*i).
	    Memory << "  " << setw (8) << (*i).RT << endl;
	}
      }
      else {
	out << "The Job Scheduling Queue is empty." << endl;
      }
      out << endl;
      out << "The contents of the FIRST LEVEL READY QUEUE" << endl;
      out << "-------------------------------------------" << endl;
      out << endl;
      if (!RQ1.empty ()) {
	list < Process >::iterator i = RQ1.begin (), j = RQ1.end ();
	for (; i != j; i++) {
	  out << setw (5) << (*i).Job << "  " << setw (9) << (*i).
	    Time << "  " << setw (9) << (*i).
	    Memory << "  " << setw (8) << (*i).RT << endl;
	}
      }
      else {
	out << "The First Level Ready Queue is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SECOND LEVEL READY QUEUE" << endl;
      out << "--------------------------------------------" << endl;
      out << endl;
      if (!RQ2.empty ()) {
	list < Process >::iterator i = RQ2.begin (), j = RQ2.end ();
	for (; i != j; i++) {
	  out << setw (5) << (*i).Job << "  " << setw (9) << (*i).
	    Time << "  " << setw (9) << (*i).
	    Memory << "  " << setw (8) << (*i).RT << endl;
	}
      }
      else {
	out << "The Second Level Ready Queue is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the I/O WAIT QUEUE" << endl;
      out << "----------------------------------" << endl;
      out << endl;
      if (!IO.empty ()) {
      out <<
	"Job #  Arr. Time  Mem. Req.  Run Time  IO Start Time IO Burst  Comp. Time"
	<< endl;
      out <<
	"-----  ---------  ---------  --------  ------------- --------  ----------"
	<< endl;
      out << endl;
	for (int i = 0; i < (static_cast < int >(IO.size ())); i++) {
	  out << setw (5) << IO[i].Job << "  " << setw (9) << IO[i].
	    Time << "  " << setw (9) << IO[i].
	    Memory << "  " << setw (8) << IO[i].
	    RT << "  " << setw (13) << IO[i].
	    IOS << " " << setw (9) << IO[i].IOB << " " << setw (10) << (IO[i].
									IOB +
									IO[i].
									IOS)
	    << endl;
      }}
      else {
	out << "The I/O Waiting Queue is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SEMAPHORE ZERO" << endl;
      out << "----------------------------------" << endl;
      out << endl;
      out << "The value of semaphore 0 is " << Semephores[0].
	value << "." << endl;
      out << endl;
      if (!Semephores[0].SemList.empty ()) {
	list < Process >::iterator i = Semephores[0].SemList.begin (), j =
	  Semephores[0].SemList.end ();
	for (; i != j; i++) {
	  out << (*i).Job << endl;
	}
      }
      else {
	out << "The waiting list for semaphore 0 is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SEMAPHORE ONE" << endl;
      out << "---------------------------------" << endl;
      out << endl;
      out << "The value of semaphore 1 is " << Semephores[1].
	value << "." << endl;
      out << endl;
      if (!Semephores[1].SemList.empty ()) {
	list < Process >::iterator i = Semephores[1].SemList.begin (), j =
	  Semephores[1].SemList.end ();
	for (; i != j; i++) {
	  out << (*i).Job << endl;
	}
      }
      else {
	out << "The waiting list for semaphore 1 is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SEMAPHORE TWO" << endl;
      out << "---------------------------------" << endl;
      out << endl;
      out << "The value of semaphore 2 is " << Semephores[2].
	value << "." << endl;
      out << endl;
      if (!Semephores[2].SemList.empty ()) {
	list < Process >::iterator i = Semephores[2].SemList.begin (), j =
	  Semephores[2].SemList.end ();
	for (; i != j; i++) {
	  out << (*i).Job << endl;
	}
      }
      else {
	out << "The waiting list for semaphore 2 is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SEMAPHORE THREE" << endl;
      out << "-----------------------------------" << endl;
      out << endl;
      out << "The value of semaphore 3 is " << Semephores[3].
	value << "." << endl;
      out << endl;
      if (!Semephores[3].SemList.empty ()) {
	list < Process >::iterator i = Semephores[3].SemList.begin (), j =
	  Semephores[3].SemList.end ();
	for (; i != j; i++) {
	  out << (*i).Job << endl;
	}
      }
      else {
	out << "The waiting list for semaphore 3 is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the SEMAPHORE FOUR" << endl;
      out << "----------------------------------" << endl;
      out << endl;
      out << "The value of semaphore 4 is " << Semephores[4].
	value << "." << endl;
      out << endl;
      if (!Semephores[4].SemList.empty ()) {
	list < Process >::iterator i = Semephores[4].SemList.begin (), j =
	  Semephores[4].SemList.end ();
	for (; i != j; i++) {
	  out << (*i).Job << endl;
	}
      }
      else {
	out << "The waiting list for semaphore 4 is empty." << endl;
      }
      out << endl;
      out << endl;
      out << "The CPU    Start Time    CPU burst time left" << endl;
      out << "-------    ----------    -------------------" << endl;
      out << endl;
      if (!CPU.empty ()) {
	out << setw (7) << CPU.front ().Job << setw(10) << "    " << CPU.front ().
	  STime << "    ";
	if (CPU.front ().RQ == "RQ1") {
	  out << setw (19) << CPURQ1 << endl;
	}
	else {
	  out << setw (19) << CPURQ2 << endl;
	}
      }
      else {
	out << "The CPU is idle." << endl;
      }
      out << endl;
      out << endl;
      out << "The contents of the FINISHED LIST" << endl;
      out << "---------------------------------" << endl;
      out << endl;
      out << "Job #  Arr. Time  Mem. Req.  Run Time  Start Time   Com. Time"
	<< endl;
      out << "-----  ---------  ---------  --------  ----------   ---------"
	<< endl;
      out << endl;
      for (int i = 0; i < (static_cast < int >(Finished.size ())); i++) {
	out << setw (5) << Finished[i].Job << "  " << setw (9) << Finished[i].
	  Time << "  " << setw (9) << Finished[i].
	  Memory << "  " << setw (8) << Finished[i].
	  RT << "  " << setw (10) << Finished[i].
	  STime << "   " << setw (9) << Finished[i].FTime << endl;
      }
      out << endl;
      out << endl;
      out << "There are " << memory <<
	" blocks of main memory available in the system." << endl;
      out << endl;
      getcm = true;
    }
    else {
      getcm = false;
    }
  }

}


int
main (int argc, char **argv)
{
  int count = 0, time = 0, memory = 512, CPURQ1 = 100, CPURQ2 =
    300, tot_proc = 0;
  float tot_wait = 0.0, tot_ta = 0.0, ata = 0.0, atw = 0.0;
  bool getcm = false, cpun = true, NOGO = false, ev = false, eve = false, ew =
    false, es = false;
  vector < string > tokens;
  list < Process > JobQ;
  list < Process > RQ1;
  list < Process > RQ2;
  list < Process > CPU;
  vector < Process > Finished;
  vector < Process > IO;
  Semephore Semephores[5];
  string command;
  ofstream out;
  out.open ("out.txt");
  void *x = NULL;
  x = getline (cin, command);
  tokens = MakeTokens (command, " ");
  while (x != NULL || !JobQ.empty () || !RQ1.empty () || !RQ2.empty ()
	 || !CPU.empty () || !IO.empty ()) {
    if (getcm && x != NULL) {
      x = getline (cin, command);
      tokens = MakeTokens (command, " ");
    }

    HandleJob (JobQ, RQ1, tokens, time, ev, eve, getcm, memory, count,
	       tot_proc);

    if (!NOGO) {
      HandleIO (IO, CPU, RQ1, tokens, time, getcm, RQ2, Finished, CPURQ1,
		CPURQ2, memory, out, NOGO);


      HandleSem (tokens, Semephores, CPU, RQ1, RQ2, Finished, memory, count,
		 CPURQ1, CPURQ2, getcm, time, out, ew, es);

    EventD (tokens, JobQ, RQ1, RQ2, CPU, Finished, IO, memory, Semephores,
              getcm, time, out, CPURQ1, CPURQ2);
    }

    if (DealCPU (CPU, RQ1, RQ2, Finished, CPURQ1, CPURQ2, memory, time, out)) {
      NOGO = true;
    }
    else {
      NOGO = false;
    }

    if (ev) {
      out << "Event: A   " << "Time: " << time << endl;
      ev = false;
      if (eve) {
	out << "This job exceeds the system's main memory capacity." << endl;
	eve = false;
      }
    }
    if (es) {
      out << "Event: S   " << "Time: " << time << endl;
      es = false;
    }
    if (ew) {
      out << "Event: W   " << "Time: " << time << endl;
      ew = false;
    }

    if (!NOGO) {

      time++;
    }
    count++;

  }
  out << endl;
  out << "The contents of the FINAL FINISHED LIST" << endl;
  out << "---------------------------------------" << endl;
  out << endl;
  out << "Job #  Arr. Time  Mem. Req.  Run Time  Start Time   Com. Time"
    << endl;
  out << "-----  ---------  ---------  --------  ----------   ---------"
    << endl;
  out << endl;
  for (int i = 0; i < (static_cast < int >(Finished.size ())); i++) {
    out << setw (5) << Finished[i].Job << "  " << setw (9) << Finished[i].
      Time << "  " << setw (9) << Finished[i].
      Memory << "  " << setw (8) << Finished[i].
      RT << "  " << setw (10) << Finished[i].
      STime << "   " << setw (9) << Finished[i].FTime << endl;
    tot_ta += (Finished[i].FTime - Finished[i].Time);
    tot_wait += (Finished[i].RQT - Finished[i].Time);
  }
  out << endl;
  out << endl;
  out.setf (ios::fixed, ios::floatfield);
  out.precision (3);
  out << "The Average Turnaround Time for the simulation was " << (tot_ta
								   / tot_proc)
    << " units." << endl;
  out << endl;
  out << "The Average Job Scheduling Wait Time for the simulation was " <<
    (tot_wait / tot_proc) << " units." << endl;
  out << endl;
  out << "There are " << memory <<
    " blocks of main memory available in the system." << endl;
  return 0;
}
