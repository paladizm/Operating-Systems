%!PS-Adobe-3.0
%%Title: simulator.cpp, CPU.cpp, CPU.h, IO.cpp, IO.h, Job.cpp, Job.h, Output.cpp, Output.h, Semephore.cpp
%%For: cps346-01.16
%%Creator: a2ps version 4.13
%%CreationDate: Wed Mar 11 11:21:25 2009
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 16
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontType get 0 eq {
    currentfont /FontMatrix get 3 get
  }{
    currentfont /FontMatrix get 3 get 1000 mul
  } ifelse
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% composite fonts for ASCII-EUC mixed string
% Version 1.2 1/31/1990
% Orignal Ken'ichi HANDA (handa@etl.go.jp)
% Modified Norio Katayama (katayama@rd.nacsis.ac.jp),1998
% Extend & Fix Koji Nakamaru (maru@on.cs.keio.ac.jp), 1999
% Anyone can freely copy, modify, distribute this program.

/copyfont {	% font-dic extra-entry-count  copyfont  font-dic
	1 index maxlength add dict begin
	{	1 index /FID ne 2 index /UniqueID ne and
		{def} {pop pop} ifelse
	} forall
	currentdict
	end
} bind def

/compositefont { % ASCIIFontName EUCFontName RomanScale RomanOffset Rot(T/F) compositefont font
    /RomanRotation exch def
    /RomanOffset exch def
    /RomanScale exch def
    userdict /fixeucfont_dict known not {
	userdict begin
	    /fixeucfont_dict 2 dict begin
		/UpperByteEncoding [
		    16#00 1 16#20 { pop 0 } for
		    16#21 1 16#28 { 16#20 sub } for
		    16#29 1 16#2F { pop 0 } for
		    16#30 1 16#74 { 16#27 sub } for
		    16#75 1 16#FF { pop 0 } for
		] def
	        /LowerByteEncoding [
		    16#00 1 16#A0 { pop /.notdef } for
		    16#A1 1 16#FE { 16#80 sub 16 2 string cvrs
				    (cXX) dup 1 4 -1 roll
				    putinterval cvn } for
		    /.notdef
		] def
		currentdict
	    end def
	end
    } if
    findfont dup /FontType get 0 eq {
	14 dict begin
	    %
	    % 7+8 bit EUC font
	    %
	    12 dict begin
		/EUCFont exch def
		/FontInfo (7+8 bit EUC font) readonly def
		/PaintType 0 def
		/FontType 0 def
		/FontMatrix matrix def
		% /FontName
		/Encoding fixeucfont_dict /UpperByteEncoding get def
		/FMapType 2 def
		EUCFont /WMode known
		{ EUCFont /WMode get /WMode exch def }
		{ /WMode 0 def } ifelse
		/FDepVector [
		    EUCFont /FDepVector get 0 get
		    [ 16#21 1 16#28 {} for 16#30 1 16#74 {} for ]
		    {
			13 dict begin
			    /EUCFont EUCFont def
			    /UpperByte exch 16#80 add def	
			    % /FontName
			    /FontInfo (EUC lower byte font) readonly def
			    /PaintType 0 def
			    /FontType 3 def
			    /FontMatrix matrix def
			    /FontBBox {0 0 0 0} def
			    /Encoding
				fixeucfont_dict /LowerByteEncoding get def
			    % /UniqueID
			    % /WMode
			    /BuildChar {
				gsave
				exch dup /EUCFont get setfont
				/UpperByte get
				2 string
				dup 0 4 -1 roll put
				dup 1 4 -1 roll put
				dup stringwidth setcharwidth
				0 0 moveto show
				grestore
			    } bind def
			    currentdict
			end
			/lowerbytefont exch definefont
		    } forall
		] def
		currentdict
	    end
	    /eucfont exch definefont
	    exch
	    findfont 1 copyfont dup begin
		RomanRotation {
			/FontMatrix FontMatrix
			[ 0 RomanScale neg RomanScale 0 RomanOffset neg 0 ]
			matrix concatmatrix def
		}{
			/FontMatrix FontMatrix
			[ RomanScale 0 0 RomanScale 0 RomanOffset ] matrix concatmatrix
			def
			/CDevProc
			    {pop pop pop pop 0 exch -1000 exch 2 div 880} def
		} ifelse
	    end
	    /asciifont exch definefont
	    exch
	    /FDepVector [ 4 2 roll ] def
	    /FontType 0 def
	    /WMode 0 def
	    /FMapType 4 def
	    /FontMatrix matrix def
	    /Encoding [0 1] def
	    /FontBBox {0 0 0 0} def
%	    /FontHeight 1.0 def % XXXX
	    /FontHeight RomanScale 1.0 ge { RomanScale }{ 1.0 } ifelse def
	    /Descent -0.3 def   % XXXX
	    currentdict
	end
	/tmpfont exch definefont
	pop
	/tmpfont findfont
    }{
	pop findfont 0 copyfont
    } ifelse
} def	

/slantfont {	% FontName slant-degree  slantfont  font'
    exch findfont 1 copyfont begin
    [ 1 0 4 -1 roll 1 0 0 ] FontMatrix exch matrix concatmatrix
    /FontMatrix exch def
    currentdict
    end
} def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  simulator.cpp) N
(/) N
(/   description:  Implements the simulator to represent Job scheduling,) N
(/                 CPU scheduling, and semaphore processing of an operating syste) N
(m.) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(#include) K
( ") p
(Functions.h) str
(") p n
(#include) K
( ") p
(CPU.h) str
(") p n
(#include) K
( ") p
(Job.h) str
(") p n
(#include) K
( ") p
(IO.h) str
(") p n
(#include) K
( ") p
(Semephore.h) str
(") p n
(#include) K
( ") p
(Output.h) str
(") p n
() N
(int) k n
(main \() p
(int) k
( argc, ) p
(char) k
( **argv\)) p n
({) N
(  ) S
(int) k
( count = 0, time = 0, memory = 512, CPURQ1 = 100, CPURQ2 =) p n
(    300, tot_proc = 0;) N
(  ) S
(float) k
( tot_wait = 0.0, tot_ta = 0.0, ata = 0.0, atw = 0.0;) p n
(  ) S
(bool) k
( getcm = ) p
(false) k
(, cpun = ) p
(true) k
(, NOGO = ) p
(false) k
(, ev = ) p
(false) k
(, eve = ) p
(false) k
(, ew =) p n
(    ) S
(false) k
(, es = ) p
(false) k
(;) p n
(  vector < string > tokens;) N
(  list < Process > JobQ;) N
(  list < Process > RQ1;) N
(  list < Process > RQ2;) N
(  list < Process > CPU;) N
(  vector < Process > Finished;) N
(  vector < Process > IO;) N
(  Semephore Semephores[5];) N
(  string command;) N
(  ofstream out;) N
(  out.open \(") S
(out.txt) str
("\);) p n
(simulator.cpp) (Page 1/3) (Mar 11, 09 11:16) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(void) k
( *x = ) p
(NULL) K
(;) p n
(  x = getline \(cin, command\);) N
(  tokens = MakeTokens \(command, ") S
( ) str
("\);) p n
(  ) S
(while) K
( \(x != ) p
(NULL) K
( || !JobQ.empty \(\) || !RQ1.empty \(\) || !RQ2.empty \(\)) p n
() S 8 T ( || !CPU.empty \(\) || !IO.empty \(\)\) {) N
(    ) S
(if) K
( \(getcm && x != ) p
(NULL) K
(\) {) p n
(      x = getline \(cin, command\);) N
(      tokens = MakeTokens \(command, ") S
( ) str
("\);) p n
(    }) N
() N
(    HandleJob \(JobQ, RQ1, tokens, time, ev, eve, getcm, memory, count,) N
() S 8 T (       tot_proc\);) N
() N
(    ) S
(if) K
( \(!NOGO\) {) p n
(      HandleIO \(IO, CPU, RQ1, tokens, time, getcm, RQ2, Finished, CPURQ1,) N
() S 8 T () S 16 T (CPURQ2, memory, out, NOGO\);) N
() N
() N
(      HandleSem \(tokens, Semephores, CPU, RQ1, RQ2, Finished, memory, count,) N
() S 8 T () S 16 T ( CPURQ1, CPURQ2, getcm, time, out, ew, es\);) N
() N
(      EventD \(tokens, JobQ, RQ1, RQ2, CPU, Finished, IO, memory, Semephores,) N
() S 8 T (      getcm, time, out, CPURQ1, CPURQ2\);) N
(    }) N
() N
(    ) S
(if) K
( \(DealCPU \(CPU, RQ1, RQ2, Finished, CPURQ1, CPURQ2, memory, time, out\)\) {) p n
(      NOGO = ) S
(true) k
(;) p n
(    }) N
(    ) S
(else) K
( {) p n
(      NOGO = ) S
(false) k
(;) p n
(    }) N
() N
(    ) S
(if) K
( \(ev\) {) p n
(      out << ") S
(Event: A   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
(      ev = ) S
(false) k
(;) p n
(      ) S
(if) K
( \(eve\) {) p n
() S 8 T (out << ") S
(This job exceeds the system's main memory capacity.) str
(" << endl;) p n
() S 8 T (eve = ) S
(false) k
(;) p n
(      }) N
(    }) N
(    ) S
(if) K
( \(es\) {) p n
(      out << ") S
(Event: S   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
(      es = ) S
(false) k
(;) p n
(    }) N
(    ) S
(if) K
( \(ew\) {) p n
(      out << ") S
(Event: W   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
(      ew = ) S
(false) k
(;) p n
(    }) N
() N
(    ) S
(if) K
( \(!NOGO\) {) p n
(      time++;) N
(    }) N
(    count++;) N
() N
(  }) N
(  out << endl;) N
(  out << ") S
(The contents of the FINAL FINISHED LIST) str
(" << endl;) p n
(  out << ") S
(---------------------------------------) str
(" << endl;) p n
(  out << endl;) N
(  out << ") S
(Job #  Arr. Time  Mem. Req.  Run Time  Start Time   Com. Time) str
(") p n
(    << endl;) N
(  out << ") S
(-----  ---------  ---------  --------  ----------   ---------) str
(") p n
(    << endl;) N
(  out << endl;) N
(  ) S
(for) K
( \() p
(int) k
( i = 0; i < \() p
(static_cast) k
( < ) p
(int) k
( >\(Finished.size \(\)\)\); i++\) {) p n
(    out << setw \(5\) << Finished[i].Job << ") S
(  ) str
(" << setw \(9\) << Finished[i].) p n
(      Time << ") S
(  ) str
(" << setw \(9\) << Finished[i].) p n
(      Memory << ") S
(  ) str
(" << setw \(8\) << Finished[i].) p n
(      RT << ") S
(  ) str
(" << setw \(10\) << Finished[i].) p n
(simulator.cpp) (Page 2/3) (Mar 11, 09 11:16) title
border
grestore
(Printed by cps346-01.16) rhead
(simulator.cpp) (1/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      STime << ") p
(   ) str
(" << setw \(9\) << Finished[i].FTime << endl;) p n
(    tot_ta += \(Finished[i].FTime - Finished[i].Time\);) N
(    tot_wait += \(Finished[i].RQT - Finished[i].Time\);) N
(  }) N
(  out << endl;) N
(  out << endl;) N
(  out.setf \(ios::fixed, ios::floatfield\);) N
(  out.precision \(3\);) N
(  out << ") S
(The Average Turnaround Time for the simulation was ) str
(" << \(tot_ta) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T (   / tot_proc\)) N
(    << ") S
( units.) str
(" << endl;) p n
(  out << endl;) N
(  out << ") S
(The Average Job Scheduling Wait Time for the simulation was ) str
(" <<) p n
(    \(tot_wait / tot_proc\) << ") S
( units.) str
(" << endl;) p n
(  out << endl;) N
(  out << ") S
(There are ) str
(" << memory <<) p n
(    ") S
( blocks of main memory available in the system.) str
(" << endl;) p n
(  ) S
(return) K
( 0;) p n
(}) N
(simulator.cpp) (Page 3/3) (Mar 11, 09 11:16) title
border
grestore
(Printed by cps346-01.16) rhead
(simulator.cpp) (2/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  CPU.cpp) N
(/) N
(/   description:  Implements the CPU for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(Functions.h) str
(") p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(bool) k n
(DealCPU \(list < Process > &CPU, list < Process > &RQ1,) p n
() S 8 T ( list < Process > &RQ2, vector < Process > &Finished, ) S
(int) k
( &CPURQ1,) p n
() S 8 T ( ) S
(int) k
( &CPURQ2, ) p
(int) k
( &memory, ) p
(int) k
( &time, ofstream & out\)) p n
({) N
(  ) S
(bool) k
( cpun = ) p
(false) k
(;) p n
(  ) S
(if) K
( \(CPU.empty \(\)\) {) p n
(    ) S
(if) K
( \(!RQ1.empty \(\)\) {) p n
(      Process temp = RQ1.front \(\);) N
(      CPU.push_back \(temp\);) N
(      cpun = ) S
(true) k
(;) p n
(      RQ1.pop_front \(\);) N
(    }) N
(    ) S
(else) K
( ) p
(if) K
( \(!RQ2.empty \(\)\) {) p n
(      Process temp = RQ2.front \(\);) N
(      CPU.push_back \(temp\);) N
(      cpun = ) S
(true) k
(;) p n
(      RQ2.pop_front \(\);) N
(    }) N
(  }) N
(  ) S
(if) K
( \(!CPU.empty \(\)\) {) p n
(    ) S
(if) K
( \(cpun == ) p
(true) k
( && !CPU.front \(\).started\) {) p n
(      CPU.front \(\).STime = time;) N
(      CPU.front \(\).started = ) S
(true) k
(;) p n
(      cpun = ) S
(false) k
(;) p n
(    }) N
(    ) S
(if) K
( \(CPU.front \(\).RQ == ") p
(RQ1) str
("\) {) p n
(CPU.cpp) (Page 1/3) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      ) p
(if) K
( \(CPU.front \(\).RTM > 0\) {) p n
() S 8 T () S
(if) K
( \(CPURQ1 > 0\) {) p n
() S 8 T (  CPU.front \(\).RTM--;) N
() S 8 T (  CPURQ1--;) N
() S 8 T (}) N
() S 8 T () S
(else) K
( {) p n
() S 8 T (  Process temp = CPU.front \(\);) N
() S 8 T (  temp.RQ = ") S
(RQ2) str
(";) p n
() S 8 T (  RQ2.push_back \(temp\);) N
() S 8 T (  CPU.pop_front \(\);) N
() S 8 T (  CPURQ1 = 100;) N
() S 8 T (  cpun = ) S
(true) k
(;) p n
() S 8 T (  out << ") S
(Event: E   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
() S 8 T (  ) S
(return) K
( ) p
(true) k
(;) p n
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (Process temp = CPU.front \(\);) N
() S 8 T (temp.FTime = time;) N
() S 8 T (memory += temp.Memory;) N
() S 8 T (Finished.push_back \(temp\);) N
() S 8 T (CPU.pop_front \(\);) N
() S 8 T (CPURQ1 = 100;) N
() S 8 T (cpun = ) S
(true) k
(;) p n
() S 8 T (out << ") S
(Event: T   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
() S 8 T () S
(return) K
( ) p
(true) k
(;) p n
(      }) N
(    }) N
(    ) S
(else) K
( {) p n
(      ) S
(if) K
( \(!RQ1.empty \(\)\) {) p n
() S 8 T (CPURQ2 = 300;) N
() S 8 T (CPURQ1 = 100;) N
() S 8 T (RQ2.push_back \(CPU.front \(\)\);) N
() S 8 T (CPU.pop_front \(\);) N
() S 8 T (CPU.push_back \(RQ1.front \(\)\);) N
() S 8 T (RQ1.pop_front \(\);) N
() S 8 T (CPU.front \(\).RTM--;) N
() S 8 T (CPURQ1--;) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T () S
(if) K
( \(CPU.front \(\).RTM > 0\) {) p n
() S 8 T (  ) S
(if) K
( \(CPURQ2 > 0\) {) p n
() S 8 T (    CPU.front \(\).RTM--;) N
() S 8 T (    CPURQ2--;) N
() S 8 T (  }) N
() S 8 T (  ) S
(else) K
( {) p n
() S 8 T (    Process temp = CPU.front \(\);) N
() S 8 T (    RQ2.push_back \(temp\);) N
() S 8 T (    CPU.pop_front \(\);) N
() S 8 T (    CPURQ2 = 300;) N
() S 8 T (    cpun = ) S
(true) k
(;) p n
() S 8 T (    out << ") S
(Event: E   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
() S 8 T (    ) S
(return) K
( ) p
(true) k
(;) p n
() S 8 T (  }) N
() S 8 T (}) N
() S 8 T () S
(else) K
( {) p n
() S 8 T (  Process temp = CPU.front \(\);) N
() S 8 T (  temp.FTime = time;) N
() S 8 T (  memory += temp.Memory;) N
() S 8 T (  Finished.push_back \(temp\);) N
() S 8 T (  CPU.pop_front \(\);) N
() S 8 T (  CPURQ2 = 300;) N
() S 8 T (  cpun = ) S
(true) k
(;) p n
() S 8 T (  out << ") S
(Event: T   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
() S 8 T (  ) S
(return) K
( ) p
(true) k
(;) p n
() S 8 T (}) N
(      }) N
(    }) N
(  }) N
(CPU.cpp) (Page 2/3) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(CPU.cpp) (3/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(  ) p
(return) K
( ) p
(false) k
(;) p n
(}) N
(CPU.cpp) (Page 3/3) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(CPU.cpp) (4/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  CPU.h) N
(/) N
(/   description:  Implements the CPU for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(bool DealCPU \(list < Process > &CPU, list < Process > &RQ1,) N
() S 8 T ( list < Process > &RQ2, vector < Process > &Finished, ) S
(int) k
( &CPURQ1,) p n
() S 8 T ( ) S
(int) k
( &CPURQ2, ) p
(int) k
( &memory, ) p
(int) k
( &time, ofstream & out\);) p n
(CPU.h) (Page 1/1) (Mar 11, 09 12:25) title
border
grestore
(Printed by cps346-01.16) rhead
(CPU.h) (5/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  IO.cpp) N
(/) N
(/   description:  Implements the I/O for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(Functions.h) str
(") p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(void) k n
(HandleIO \(vector < Process > &IO, list < Process > &CPU,) p n
() S 8 T (  list < Process > &RQ1, vector < string > &tokens, ) S
(int) k
( &time,) p n
() S 8 T (  ) S
(bool) k
( & getcm, list < Process > &RQ2, vector < Process > &Finished,) p n
() S 8 T (  ) S
(int) k
( &CPURQ1, ) p
(int) k
( &CPURQ2, ) p
(int) k
( &memory, ofstream & out, ) p
(bool) k
( & NOGO\)) p n
({) N
(  ) S
(if) K
( \(!IO.empty \(\)\) {) p n
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < IO.size \(\); i++\) {) p n
(      ) S
(if) K
( \(IO[i].IOBurst > 0\) {) p n
() S 8 T (IO[i].IOBurst--;) N
(      }) N
(      ) S
(if) K
( \(IO[i].IOBurst == 0\) {) p n
() S 8 T (IO[i].RQ = ") S
(RQ1) str
(";) p n
() S 8 T (IO[i].IOClean = ) S
(true) k
(;) p n
() S 8 T (RQ1.push_back \(IO[i]\);) N
() S 8 T (out << ") S
(Event: C   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
(      }) N
(    }) N
(    ) S
(int) k
( j = ) p
(static_cast) k
( < ) p
(int) k
( >\(IO.size \(\)\);) p n
(    vector < Process > temp;) N
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < j; i++\) {) p n
(      ) S
(if) K
( \(!IO[i].IOClean\) {) p n
() S 8 T (temp.push_back \(IO[i]\);) N
(      }) N
(    }) N
(    IO.clear \(\);) N
(    j = ) S
(static_cast) k
( < ) p
(int) k
( >\(temp.size \(\)\);) p n
(IO.cpp) (Page 1/2) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(for) K
( \() p
(int) k
( i = 0; i < j; i++\) {) p n
(      IO.push_back \(temp[i]\);) N
(    }) N
(  }) N
() N
(  ) S
(if) K
( \(tokens[0] == ") p
(I) str
("\) {) p n
(    ) S
(if) K
( \(time == StringToInt \(tokens[1]\)\) {) p n
(      ) S
(if) K
( \(!CPU.empty \(\)\) {) p n
() S 8 T (CPU.front \(\).IOBurst = StringToInt \(tokens[2]\);) N
() S 8 T (CPU.front \(\).IOClean = ) S
(false) k
(;) p n
() S 8 T (CPU.front \(\).IOS = time;) N
() S 8 T (CPU.front \(\).IOB = StringToInt \(tokens[2]\);) N
() S 8 T (IO.push_back \(CPU.front \(\)\);) N
() S 8 T (out << ") S
(Event: I   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
() S 8 T (CPU.pop_front \(\);) N
() S 8 T (CPURQ1 = 100;) N
() S 8 T (CPURQ2 = 300;) N
(      }) N
(      getcm = ) S
(true) k
(;) p n
(    }) N
(    ) S
(else) K
( {) p n
(      getcm = ) S
(false) k
(;) p n
(    }) N
() N
(  }) N
() N
(}) N
(IO.cpp) (Page 2/2) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(IO.cpp) (6/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  IO.h) N
(/) N
(/   description:  Implements the I/O for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(void) k
( HandleIO \(vector < Process > &IO, list < Process > &CPU,) p n
() S 8 T (  list < Process > &RQ1, vector < string > &tokens, ) S
(int) k
( &time,) p n
() S 8 T (  bool & getcm, list < Process > &RQ2, vector < Process > &Finished,) N
() S 8 T (  ) S
(int) k
( &CPURQ1, ) p
(int) k
( &CPURQ2, ) p
(int) k
( &memory, ofstream & out, bool & NOGO\);) p n
(IO.h) (Page 1/1) (Mar 11, 09 12:25) title
border
grestore
(Printed by cps346-01.16) rhead
(IO.h) (7/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Job.cpp) N
(/) N
(/   description:  Implements the Job Scheduler for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(Functions.h) str
(") p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(void) k n
(HandleJob \(list < Process > &JobQ, list < Process > &RQ1,) p n
() S 8 T (   vector < string > &tokens, ) S
(int) k
( &time, ) p
(bool) k
( & ev, ) p
(bool) k
( & eve,) p n
() S 8 T (   ) S
(bool) k
( & getcm, ) p
(int) k
( &memory, ) p
(int) k
( &count, ) p
(int) k
( &tot_proc\)) p n
({) N
(  ) S
(if) K
( \(tokens[0] == ") p
(A) str
("\) {) p n
(    ) S
(if) K
( \(count == 0\) {) p n
(      time = StringToInt \(tokens[1]\);) N
(      count++;) N
(    }) N
(    ) S
(if) K
( \(time == StringToInt \(tokens[1]\)\) {) p n
(      Process newp;) N
(      newp.Event = ") S
(A) str
(";) p n
(      newp.RQ = ") S
(RQ1) str
(";) p n
(      newp.Time = StringToInt \(tokens[1]\);) N
(      newp.Job = StringToInt \(tokens[2]\);) N
(      newp.Memory = StringToInt \(tokens[3]\);) N
(      newp.RT = StringToInt \(tokens[4]\);) N
(      newp.RTM = StringToInt \(tokens[4]\);) N
(      newp.started = ) S
(false) k
(;) p n
(      newp.IOBurst = 0;) N
(      newp.IOClean = ) S
(false) k
(;) p n
(      newp.RQT = 0;) N
(      ev = ) S
(true) k
(;) p n
(      ) S
(if) K
( \(newp.Memory <= 512\) {) p n
() S 8 T (JobQ.push_back \(newp\);) N
() S 8 T (tot_proc++;) N
(Job.cpp) (Page 1/2) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      }) p n
(      ) S
(else) K
( {) p n
() S 8 T (eve = ) S
(true) k
(;) p n
(      }) N
(      getcm = ) S
(true) k
(;) p n
(    }) N
(    ) S
(else) K
( {) p n
(      getcm = ) S
(false) k
(;) p n
(    }) N
(  }) N
(  ) S
(while) K
( \(!JobQ.empty \(\)\) {) p n
(    ) S
(if) K
( \(JobQ.front \(\).Memory <= memory\) {) p n
(      JobQ.front \(\).RQT = time;) N
(      RQ1.push_back \(JobQ.front \(\)\);) N
(      memory -= JobQ.front \(\).Memory;) N
(      JobQ.pop_front \(\);) N
(    }) N
(    ) S
(else) K
( {) p n
(      ) S
(break) K
(;) p n
(    }) N
(  }) N
() N
() N
(}) N
(Job.cpp) (Page 2/2) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(Job.cpp) (8/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Job.h) N
(/) N
(/   description:  Implements the Job Scheduler for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(void) k
( HandleJob \(list < Process > &JobQ, list < Process > &RQ1,) p n
() S 8 T (   vector < string > &tokens, ) S
(int) k
( &time, bool & ev, bool & eve,) p n
() S 8 T (   bool & getcm, ) S
(int) k
( &memory, ) p
(int) k
( &count, ) p
(int) k
( &tot_proc\);) p n
(Job.h) (Page 1/1) (Mar 11, 09 12:25) title
border
grestore
(Printed by cps346-01.16) rhead
(Job.h) (9/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Output.cpp) N
(/) N
(/   description:  Implements Event D for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(Functions.h) str
(") p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(void) k n
(EventD \(vector < string > tokens, list < Process > JobQ, list < Process > RQ1,) p n
() S 8 T (list < Process > RQ2, list < Process > CPU,) N
() S 8 T (vector < Process > Finished, vector < Process > IO, ) S
(int) k
( memory,) p n
() S 8 T (Semephore Semephores[], ) S
(bool) k
( & getcm, ) p
(int) k
( time, ofstream & out,) p n
() S 8 T () S
(int) k
( CPURQ1, ) p
(int) k
( CPURQ2\)) p n
({) N
(  ) S
(if) K
( \(tokens[0] == ") p
(D) str
("\) {) p n
(    ) S
(if) K
( \(time == StringToInt \(tokens[1]\)\) {) p n
() N
(      out << ") S
(Event: D   ) str
(" << ") p
(Time: ) str
(" << time << endl;) p n
(      out << endl;) N
(      out << ") S
(************************************************************) str
(" <<) p n
() S 8 T (endl;) N
(      out << endl;) N
(      out << ") S
(The status of the simulator at time ) str
(" << time << ") p
(.) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(The contents of the JOB SCHEDULING QUEUE) str
(" << endl;) p n
(      out << ") S
(----------------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(Job #  Arr. Time  Mem. Req.  Run Time) str
(" << endl;) p n
(      out << ") S
(-----  ---------  ---------  --------) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!JobQ.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = JobQ.begin \(\), j = JobQ.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << setw \(5\) << \(*i\).Job << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
(Output.cpp) (Page 1/4) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (    Time << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
() S 8 T (    Memory << ") S
(  ) str
(" << setw \(8\) << \(*i\).RT << endl;) p n
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The Job Scheduling Queue is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << ") S
(The contents of the FIRST LEVEL READY QUEUE) str
(" << endl;) p n
(      out << ") S
(-------------------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!RQ1.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = RQ1.begin \(\), j = RQ1.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << setw \(5\) << \(*i\).Job << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
() S 8 T (    Time << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
() S 8 T (    Memory << ") S
(  ) str
(" << setw \(8\) << \(*i\).RT << endl;) p n
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The First Level Ready Queue is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the SECOND LEVEL READY QUEUE) str
(" << endl;) p n
(      out << ") S
(--------------------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!RQ2.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = RQ2.begin \(\), j = RQ2.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << setw \(5\) << \(*i\).Job << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
() S 8 T (    Time << ") S
(  ) str
(" << setw \(9\) << \(*i\).) p n
() S 8 T (    Memory << ") S
(  ) str
(" << setw \(8\) << \(*i\).RT << endl;) p n
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The Second Level Ready Queue is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the I/O WAIT QUEUE) str
(" << endl;) p n
(      out << ") S
(----------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!IO.empty \(\)\) {) p n
() S 8 T (out <<) N
() S 8 T (  ") S
(Job #  Arr. Time  Mem. Req.  Run Time  IO Start Time IO Burst  Comp. Time) str
(") p n
() S 8 T (  << endl;) N
() S 8 T (out <<) N
() S 8 T (  ") S
(-----  ---------  ---------  --------  ------------- --------  ----------) str
(") p n
() S 8 T (  << endl;) N
() S 8 T (out << endl;) N
() S 8 T () S
(for) K
( \() p
(int) k
( i = 0; i < \() p
(static_cast) k
( < ) p
(int) k
( >\(IO.size \(\)\)\); i++\) {) p n
() S 8 T (  out << setw \(5\) << IO[i].Job << ") S
(  ) str
(" << setw \(9\) << IO[i].) p n
() S 8 T (    Time << ") S
(  ) str
(" << setw \(9\) << IO[i].) p n
() S 8 T (    Memory << ") S
(  ) str
(" << setw \(8\) << IO[i].) p n
() S 8 T (    RT << ") S
(  ) str
(" << setw \(13\) << IO[i].) p n
() S 8 T (    IOS << ") S
( ) str
(" << setw \(9\) << IO[i].IOB << ") p
( ) str
(" << setw \(10\) << \(IO[i].) p n
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T (IOB +) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T (IO[i].) N
() S 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S 48 T () S 56 T () S 64 T () S 72 T (IOS\)) N
() S 8 T (    << endl;) N
(      }}) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The I/O Waiting Queue is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the SEMAPHORE ZERO) str
(" << endl;) p n
(      out << ") S
(----------------------------------) str
(" << endl;) p n
(Output.cpp) (Page 2/4) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(Output.cpp) (10/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      out << endl;) p n
(      out << ") S
(The value of semaphore 0 is ) str
(" << Semephores[0].) p n
() S 8 T (value << ") S
(.) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!Semephores[0].SemList.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = Semephores[0].SemList.begin \(\), j =) N
() S 8 T (  Semephores[0].SemList.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << \(*i\).Job << endl;) N
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The waiting list for semaphore 0 is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the SEMAPHORE ONE) str
(" << endl;) p n
(      out << ") S
(---------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(The value of semaphore 1 is ) str
(" << Semephores[1].) p n
() S 8 T (value << ") S
(.) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!Semephores[1].SemList.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = Semephores[1].SemList.begin \(\), j =) N
() S 8 T (  Semephores[1].SemList.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << \(*i\).Job << endl;) N
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The waiting list for semaphore 1 is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the SEMAPHORE TWO) str
(" << endl;) p n
(      out << ") S
(---------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(The value of semaphore 2 is ) str
(" << Semephores[2].) p n
() S 8 T (value << ") S
(.) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!Semephores[2].SemList.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = Semephores[2].SemList.begin \(\), j =) N
() S 8 T (  Semephores[2].SemList.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << \(*i\).Job << endl;) N
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The waiting list for semaphore 2 is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the SEMAPHORE THREE) str
(" << endl;) p n
(      out << ") S
(-----------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(The value of semaphore 3 is ) str
(" << Semephores[3].) p n
() S 8 T (value << ") S
(.) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!Semephores[3].SemList.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = Semephores[3].SemList.begin \(\), j =) N
() S 8 T (  Semephores[3].SemList.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << \(*i\).Job << endl;) N
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The waiting list for semaphore 3 is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(Output.cpp) (Page 3/4) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(      out << endl;) p n
(      out << ") S
(The contents of the SEMAPHORE FOUR) str
(" << endl;) p n
(      out << ") S
(----------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(The value of semaphore 4 is ) str
(" << Semephores[4].) p n
() S 8 T (value << ") S
(.) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!Semephores[4].SemList.empty \(\)\) {) p n
() S 8 T (list < Process >::iterator i = Semephores[4].SemList.begin \(\), j =) N
() S 8 T (  Semephores[4].SemList.end \(\);) N
() S 8 T () S
(for) K
( \(; i != j; i++\) {) p n
() S 8 T (  out << \(*i\).Job << endl;) N
() S 8 T (}) N
(      }) N
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The waiting list for semaphore 4 is empty.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The CPU    Start Time    CPU burst time left) str
(" << endl;) p n
(      out << ") S
(-------    ----------    -------------------) str
(" << endl;) p n
(      out << endl;) N
(      ) S
(if) K
( \(!CPU.empty \(\)\) {) p n
() S 8 T (out << setw \(7\) << CPU.front \(\).Job << setw \(10\) << ") S
(    ) str
(" << CPU.) p n
() S 8 T (  front \(\).STime << setw \(19\) << ") S
(    ) str
(" << CPU.front \(\).RTM << endl;) p n
() S 8 T () S
(//if \(CPU.front \(\).RQ == "RQ1"\) {) c n
() p 8 T () S
(//out << setw \(19\) << CPURQ1 << endl;) c n
() p 8 T () S
(//}) c n
() p 8 T () S
(//else {) c n
() p 8 T () S
(//out << setw \(19\) << CPURQ2 << endl;) c n
() p 8 T () S
(//}) c n
(      }) p n
(      ) S
(else) K
( {) p n
() S 8 T (out << ") S
(The CPU is idle.) str
(" << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(The contents of the FINISHED LIST) str
(" << endl;) p n
(      out << ") S
(---------------------------------) str
(" << endl;) p n
(      out << endl;) N
(      out << ") S
(Job #  Arr. Time  Mem. Req.  Run Time  Start Time   Com. Time) str
(") p n
() S 8 T (<< endl;) N
(      out << ") S
(-----  ---------  ---------  --------  ----------   ---------) str
(") p n
() S 8 T (<< endl;) N
(      out << endl;) N
(      ) S
(for) K
( \() p
(int) k
( i = 0; i < \() p
(static_cast) k
( < ) p
(int) k
( >\(Finished.size \(\)\)\); i++\) {) p n
() S 8 T (out << setw \(5\) << Finished[i].Job << ") S
(  ) str
(" << setw \(9\) << Finished[i].) p n
() S 8 T (  Time << ") S
(  ) str
(" << setw \(9\) << Finished[i].) p n
() S 8 T (  Memory << ") S
(  ) str
(" << setw \(8\) << Finished[i].) p n
() S 8 T (  RT << ") S
(  ) str
(" << setw \(10\) << Finished[i].) p n
() S 8 T (  STime << ") S
(   ) str
(" << setw \(9\) << Finished[i].FTime << endl;) p n
(      }) N
(      out << endl;) N
(      out << endl;) N
(      out << ") S
(There are ) str
(" << memory <<) p n
() S 8 T (") S
( blocks of main memory available in the system.) str
(" << endl;) p n
(      out << endl;) N
(      getcm = ) S
(true) k
(;) p n
(    }) N
(    ) S
(else) K
( {) p n
(      getcm = ) S
(false) k
(;) p n
(    }) N
(  }) N
() N
(}) N
(Output.cpp) (Page 4/4) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(Output.cpp) (11/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Output.cpp) N
(/) N
(/   description:  Implements Event D for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(void) k
( EventD \(vector < string > tokens, list < Process > JobQ, list < Process > R) p n
(Q1,) N
() S 8 T (list < Process > RQ2, list < Process > CPU,) N
() S 8 T (vector < Process > Finished, vector < Process > IO, ) S
(int) k
( memory,) p n
() S 8 T (Semephore Semephores[], bool & getcm, ) S
(int) k
( time, ofstream & out,) p n
() S 8 T () S
(int) k
( CPURQ1, ) p
(int) k
( CPURQ2\);) p n
(Output.h) (Page 1/1) (Mar 11, 09 12:25) title
border
grestore
(Printed by cps346-01.16) rhead
(Output.h) (12/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Semephore.cpp) N
(/) N
(/   description:  Implements Semephores for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
(#include) K
( ") p
(Functions.h) str
(") p n
() N
(struct) k
( Process) p n
({) N
(  string Event;) N
(  string RQ;) N
(  ) S
(int) k
( Time, Job, Memory, RT, RTM, RQT, FTime, STime, IOBurst, IOS, IOB;) p n
(  ) S
(bool) k
( started, IOClean;) p n
(};) N
() N
(struct) k
( Semephore) p n
({) N
(  ) S
(int) k
( value;) p n
(    list < Process > SemList;) N
(};) N
() N
(void) k n
(HandleSem \(vector < string > &tokens, Semephore Semephores[],) p n
() S 8 T (   list < Process > &CPU, list < Process > &RQ1,) N
() S 8 T (   list < Process > &RQ2, vector < Process > &Finished, ) S
(int) k
( &memory,) p n
() S 8 T (   ) S
(int) k
( &count, ) p
(int) k
( &CPURQ1, ) p
(int) k
( &CPURQ2, ) p
(bool) k
( & getcm, ) p
(int) k
( &time,) p n
() S 8 T (   ofstream & out, ) S
(bool) k
( & ew, ) p
(bool) k
( & es\)) p n
({) N
(  ) S
(if) K
( \(count == 1\) {) p n
(    ) S
(for) K
( \() p
(int) k
( i = 0; i < 5; i++\) {) p n
(      Semephores[i].value = 1;) N
(    }) N
(  }) N
(  ) S
(if) K
( \(tokens[0] == ") p
(W) str
("\) {) p n
(    ) S
(if) K
( \(time == StringToInt \(tokens[1]\)\) {) p n
(      ) S
(int) k
( i = StringToInt \(tokens[2]\);) p n
(      ) S
(if) K
( \(Semephores[i].value < 1\) {) p n
() S 8 T (Semephores[i].SemList.push_back \(CPU.front \(\)\);) N
() S 8 T (CPU.pop_front \(\);) N
() S 8 T (CPURQ1 = 100;) N
() S 8 T (CPURQ2 = 300;) N
(      }) N
(      Semephores[i].value--;) N
(      getcm = ) S
(true) k
(;) p n
(      ew = ) S
(true) k
(;) p n
(    }) N
(    ) S
(else) K
( {) p n
(      getcm = ) S
(false) k
(;) p n
(Semephore.cpp) (Page 1/2) (Mar 11, 09 11:15) title
border
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    }) p n
(  }) N
(  ) S
(if) K
( \(tokens[0] == ") p
(S) str
("\) {) p n
(    ) S
(if) K
( \(time == StringToInt \(tokens[1]\)\) {) p n
(      ) S
(int) k
( i = StringToInt \(tokens[2]\);) p n
(      ) S
(if) K
( \(!Semephores[i].SemList.empty \(\)\) {) p n
() S 8 T (Semephores[i].SemList.front \(\).RQ = ") S
(RQ1) str
(";) p n
() S 8 T (RQ1.push_back \(Semephores[i].SemList.front \(\)\);) N
() S 8 T (Semephores[i].SemList.pop_front \(\);) N
(      }) N
(      Semephores[i].value++;) N
(      getcm = ) S
(true) k
(;) p n
(      es = ) S
(true) k
(;) p n
() N
(    }) N
(    ) S
(else) K
( {) p n
(      getcm = ) S
(false) k
(;) p n
(    }) N
(  }) N
(}) N
(Semephore.cpp) (Page 2/2) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(Semephore.cpp) (13/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Semephore.h) N
(/) N
(/   description:  Implements Semephores for the simulator) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(void) k
( HandleSem \(vector < string > &tokens, Semephore Semephores[],) p n
() S 8 T (   list < Process > &CPU, list < Process > &RQ1,) N
() S 8 T (   list < Process > &RQ2, vector < Process > &Finished, ) S
(int) k
( &memory,) p n
() S 8 T (   ) S
(int) k
( &count, ) p
(int) k
( &CPURQ1, ) p
(int) k
( &CPURQ2, bool & getcm, ) p
(int) k
( &time,) p n
() S 8 T (   ofstream & out, bool & ew, bool & es\);) N
(Semephore.h) (Page 1/1) (Mar 11, 09 12:25) title
border
grestore
(Printed by cps346-01.16) rhead
(Semephore.h) (14/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*******************************************************************************) c n
(/) N
(/      filename:  Functions.cpp) N
(/) N
(/   description:  Usefull functions to convert strings to ints and ) N
(/                 to make tokens.) N
(/) N
(/        author:  Paladino, Zac) N
(/      login id:  cps346-n1.16) N
(/) N
(/         class:  CPS 346) N
(/    instructor:  Perugini) N
(/    assignment:  PJ #2 ) N
(/) N
(/      assigned:  February 18, 2009) N
(/           due:  March 11, 2009) N
(/) N
(/******************************************************************************/) N
() p n
(#include) K
( <iostream>) p n
(#include) K
( <iomanip>) p n
(#include) K
( <queue>) p n
(#include) K
( <list>) p n
(#include) K
( <vector>) p n
(#include) K
( <string>) p n
(#include) K
( <fstream>) p n
(using) K
( ) p
(namespace) K
( std;) p n
() N
(/*********************** Function: MakeTokens ********************/) c n
(//This function makes tokens out of the numbers/letters given in the) N
(//input file and places them into a vector for ease of use.) N
(//Pre: The numbers/letters must be the ones that you want to be in) N
(//         the vector. It takes care of all the whitespace.) N
(//Post: Return the vector with tokens in it.) N
(vector < string > MakeTokens \() p
(const) K
( string & str, ) p
(const) K
( string & delim\)) p n
({) N
(  vector < string > tokens;) N
(  size_t p = 0, p1 = string::npos;) N
(  ) S
(while) K
( \(p != string::npos\) {) p n
(    p1 = str.find_first_of \(delim, p\);) N
(    ) S
(if) K
( \(p1 != p\) {) p n
(      string token = str.substr \(p, p1 - p\);) N
(      tokens.push_back \(token\);) N
(    }) N
(    p = str.find_first_not_of \(delim, p1\);) N
(  }) N
(  ) S
(return) K
( tokens;) p n
(}) N
() N
(/*********************** Function: StringToInt ********************/) c n
(//This function makes strings into ints.) N
(//Pre: The string must be an integer before placing in function.) N
(//Post: Returns the int from the conversion of the string.) N
(int) k n
(StringToInt \(string strconvert\)) p n
({) N
(  ) S
(int) k
( conversion;) p n
(  conversion = atoi \(strconvert.c_str \(\)\);) N
(  ) S
(return) K
( \(conversion\);) p n
(}) N
(Functions.cpp) (Page 1/1) (Mar 11, 09 11:15) title
border
grestore
(Printed by cps346-01.16) rhead
(Functions.cpp) (15/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(vector < string > MakeTokens \() p
(const) K
( string & str, ) p
(const) K
( string & delim\);) p n
(int) k
( StringToInt \(string strconvert\);) p n
(Functions.h) (Page 1/1) (Mar 11, 09 10:59) title
border
grestore
(Printed by cps346-01.16) rhead
(Functions.h) (16/16) (Wednesday March 11, 2009) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
