This is a course in programming language concepts.

The approach involves studying language concepts, such as scope and parameter
passing, by implementing a series of interpreters in Scheme, for purposes of
its combined simplicity and power, and assessing the differences in the
resulting languages.

Students can also expect a comparative survey of programming language paradigms
and the use of representative languages, such as Haskell, PROLOG, and
Smalltalk.

What is a PL paradigm?

What are the 4 main PL paradigms?

   - Is Java a pure OO language?
   - Is C++ a pure OO language?
   - Is Scheme a pure functional language?

   - Future of PL's ... blurred distinctions

We need to develop a vocabulary for comparative study:

   - What is a program, language, programming language, PL concept?

   - What is a static/dynamic property?
   - What is a side effect? expressions vs. statements
   - What is referential transparency?
   - What is a first-class entity?
      - Are objects first-class in C++? Java?
      - Are functions first-class in functional languages?

Language evaluation: readability, writability, reliability, cost

Course themes:

   - relationship between languages and the capacity to express ideas about
     computation

   - static (rigid and fast) vs. dynamic (flexible and slow) properties
   - cost of execution vs. cost of development 
   - speed of execution vs. speed of development 

   - shift in modern times towards more functional, dynamic languages
     (speed of execution is less important as a design goal as it once was)

   - simple, small, and powerful languages (LISP, Smalltalk) vs. complex,
     large, and weak languages (so called `kitchen-sink languages,' e.g., C++)

   - languages evolve: the influence of language design and implementation
     options on current trends in programming practice and vice versa (iPod,
     GPS in car)

Why bother?

   - improve background for choosing appropriate languages and learning new
     languages and technologies

   - some things cannot be expressed as easily in certain languages

   - increase capacity to express ideas about computation (thinking out of the
     box)

   - to become a well-rounded computer scientist and a better programmer, in
     any language

This class is for the student who enjoys problem solving and exploring
completely new systems and ways of thinking.
